*** /usr/local/include/matplotlib-cpp/matplotlibcpp.h.orig	2021-07-30 12:50:27.441657593 +0900
--- /usr/local/include/matplotlib-cpp/matplotlibcpp.h	2021-10-14 16:44:05.616334355 +0900
***************
*** 99,104 ****
--- 99,105 ----
      PyObject *s_python_function_barh;
      PyObject *s_python_function_colorbar;
      PyObject *s_python_function_subplots_adjust;
+     PyObject *s_python_function_set_zlim;
  
  
      /* For now, _interpreter is implemented as a singleton since its currently not possible to have
***************
*** 640,645 ****
--- 641,779 ----
    if (res) Py_DECREF(res);
  }
  
+ template <typename Numeric>
+ void scatter3(const std::vector<Numeric> &x,
+                   const std::vector<Numeric> &y,
+                   const std::vector<Numeric> &z,
+                   const std::map<std::string, std::string> &keywords =
+                       std::map<std::string, std::string>())
+ {
+   detail::_interpreter::get();
+ 
+   // Same as with plot_surface: We lazily load the modules here the first time 
+   // this function is called because I'm not sure that we can assume "matplotlib 
+   // installed" implies "mpl_toolkits installed" on all platforms, and we don't 
+   // want to require it for people who don't need 3d plots.
+   static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;
+   if (!mpl_toolkitsmod) {
+     detail::_interpreter::get();
+ 
+     PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");
+     PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");
+     if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }
+ 
+     mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
+     Py_DECREF(mpl_toolkits);
+     if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }
+ 
+     axis3dmod = PyImport_Import(axis3d);
+     Py_DECREF(axis3d);
+     if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }
+   }
+ 
+   assert(x.size() == y.size());
+   assert(y.size() == z.size());
+ 
+   PyObject *xarray = detail::get_array(x);
+   PyObject *yarray = detail::get_array(y);
+   PyObject *zarray = detail::get_array(z);
+ 
+   // construct positional args
+   PyObject *args = PyTuple_New(3);
+   PyTuple_SetItem(args, 0, xarray);
+   PyTuple_SetItem(args, 1, yarray);
+   PyTuple_SetItem(args, 2, zarray);
+ 
+   // Build up the kw args.
+   PyObject *kwargs = PyDict_New();
+ 
+   for (std::map<std::string, std::string>::const_iterator it = keywords.begin();
+        it != keywords.end(); ++it) {
+     PyDict_SetItemString(kwargs, it->first.c_str(),
+                          PyString_FromString(it->second.c_str()));
+   }
+ 
+   PyObject *fig =
+       PyObject_CallObject(detail::_interpreter::get().s_python_function_figure,
+                           detail::_interpreter::get().s_python_empty_tuple);
+   if (!fig) throw std::runtime_error("Call to figure() failed.");
+ 
+   PyObject *gca_kwargs = PyDict_New();
+   PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));
+ 
+   PyObject *gca = PyObject_GetAttrString(fig, "gca");
+   if (!gca) throw std::runtime_error("No gca");
+   Py_INCREF(gca);
+   PyObject *axis = PyObject_Call(
+       gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);
+ 
+   if (!axis) throw std::runtime_error("No axis");
+   Py_INCREF(axis);
+ 
+   Py_DECREF(gca);
+   Py_DECREF(gca_kwargs);
+ 
+   PyObject *scatter3 = PyObject_GetAttrString(axis, "scatter");
+   if (!scatter3) throw std::runtime_error("No 3D scatter plot");
+   Py_INCREF(scatter3);
+   PyObject *res = PyObject_Call(scatter3, args, kwargs);
+   if (!res) throw std::runtime_error("Failed 3D scatter plot");
+   Py_DECREF(scatter3);
+ 
+   Py_DECREF(axis);
+   Py_DECREF(args);
+   Py_DECREF(kwargs);
+   if (res) Py_DECREF(res);
+ }
+ 
+ template<typename Numeric>
+ void set_zlim(Numeric left, Numeric right)
+ {
+     detail::_interpreter::get();
+ 
+     // Same as with plot_surface: We lazily load the modules here the first time 
+     // this function is called because I'm not sure that we can assume "matplotlib 
+     // installed" implies "mpl_toolkits installed" on all platforms, and we don't 
+     // want to require it for people who don't need 3d plots.
+     static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;
+     if (!mpl_toolkitsmod) {
+       PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");
+       PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");
+       if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }
+ 
+       mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
+       Py_DECREF(mpl_toolkits);
+       if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }
+ 
+       axis3dmod = PyImport_Import(axis3d);
+       Py_DECREF(axis3d);
+       if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }
+     }
+ 
+     PyObject* list = PyList_New(2);
+     PyList_SetItem(list, 0, PyFloat_FromDouble(left));
+     PyList_SetItem(list, 1, PyFloat_FromDouble(right));
+ 
+     PyObject* args = PyTuple_New(1);
+     PyTuple_SetItem(args, 0, list);
+ 
+     PyObject *ax =
+     PyObject_CallObject(detail::_interpreter::get().s_python_function_gca,
+       detail::_interpreter::get().s_python_empty_tuple);
+     if (!ax) throw std::runtime_error("Call to gca() failed.");
+     Py_INCREF(ax);
+ 
+     PyObject *zlim = PyObject_GetAttrString(ax, "set_zlim");
+     if (!zlim) throw std::runtime_error("Attribute set_zlim not found.");
+     Py_INCREF(zlim);
+ 
+     PyObject* res = PyObject_CallObject(zlim, args);
+     if(!res) throw std::runtime_error("Call to set_zlim() failed.");
+ 
+     Py_DECREF(args);
+     Py_DECREF(res);
+ }
+ 
  template<typename Numeric>
  bool stem(const std::vector<Numeric> &x, const std::vector<Numeric> &y, const std::map<std::string, std::string>& keywords)
  {
